trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'a4603337-9ed9-46c6-8f8c-81a02241eb1a'
  imageRepository: 'myapp'
  containerRegistry: 'pocaksregistry.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'pocaksregistry-auth'
  vmImageName: 'ubuntu-latest'

  # Dependency-Track Variables
  DEPENDENCY_TRACK_URL: "http://13.71.124.102:8080/api/v1/bom"
  DEPENDENCY_TRACK_API_KEY: "odt_cotAAKi5aV1x9KhEwaZzwK8mcoTwtRCo"
  FULL_IMAGE_NAME: "$(containerRegistry)/$(imageRepository):$(tag)"
  SBOM_REPORT_FILE: "$(System.DefaultWorkingDirectory)/sbom.json"
  TRIVY_REPORT_FILE: "$(System.DefaultWorkingDirectory)/trivy-report.json"
  TRIVY_CYCLONEDX_FILE: "$(System.DefaultWorkingDirectory)/trivy-cyclonedx.json"
  PROJECT_UUID: "647ba19d-0886-4d99-bda3-788d172a9bd7"

stages:
- stage: Build
  displayName: Build and Push Image
  jobs:
  - job: Build
    displayName: Build and Push to ACR
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: "Build and Push Image"
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: KBOM
  displayName: Security Scans (SBOM & Trivy)
  dependsOn: Build
  jobs:
  - job: SecurityScan
    displayName: Generate SBOM and Scan for Vulnerabilities
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: "Login to ACR"
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - script: |
        #!/bin/sh
        set -eo pipefail

        # Function to install Syft if not installed
        install_syft() {
            echo "🔍 Checking Syft installation..."
            if ! command -v syft &> /dev/null; then
                echo "⚡ Syft not found. Installing..."
                curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
                echo "✅ Syft installed successfully."
            else
                echo "✅ Syft is already installed."
            fi
        }

        # Function to install Trivy if not installed
        install_trivy() {
            echo "🔍 Checking Trivy installation..."
            if ! command -v trivy &> /dev/null; then
                echo "⚡ Trivy not found. Installing..."
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                echo "✅ Trivy installed successfully."
            else
                echo "✅ Trivy is already installed."
            fi
        }

        # Install Syft and Trivy if needed
        install_syft
        install_trivy

        # Run Syft scan to generate SBOM
        echo "📄 Generating SBOM for ($FULL_IMAGE_NAME) with Syft..."
        if syft "$FULL_IMAGE_NAME" -o cyclonedx-json > "$SBOM_REPORT_FILE"; then
            echo "✅ Syft scan complete. SBOM saved at $SBOM_REPORT_FILE."
        else
            echo "❌ Syft scan failed!" >&2
            exit 1
        fi

        # Ensure SBOM file exists
        if [ ! -f "$SBOM_REPORT_FILE" ]; then
            echo "❌ ERROR: SBOM file not found after Syft scan!"
            exit 1
        fi

        # Run Trivy scan to generate vulnerability report
        echo "🔎 Scanning ($FULL_IMAGE_NAME) with Trivy..."
        if trivy image --format json --output "$TRIVY_REPORT_FILE" "$FULL_IMAGE_NAME"; then
            echo "✅ Trivy scan complete. Report saved at $TRIVY_REPORT_FILE."
        else
            echo "❌ Trivy scan failed!" >&2
            exit 1
        fi

        # Convert Trivy report to CycloneDX format
        echo "🔄 Converting Trivy report to CycloneDX format..."
        if trivy image --format cyclonedx --output "$TRIVY_CYCLONEDX_FILE" "$FULL_IMAGE_NAME"; then
            echo "✅ Trivy CycloneDX report saved at $TRIVY_CYCLONEDX_FILE."
        else
            echo "❌ Trivy CycloneDX conversion failed!" >&2
            exit 1
        fi
      displayName: "Run SBOM & Trivy Scan"

    - task: PublishBuildArtifacts@1
      displayName: "Upload Security Reports"
      inputs:
        pathToPublish: "$(System.DefaultWorkingDirectory)"
        artifactName: "Security-Reports"

- stage: UploadDependencyTrack
  displayName: Upload Reports to Dependency-Track
  dependsOn: KBOM
  jobs:
  - job: UploadReports
    displayName: Upload SBOM & Trivy Reports
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        #!/bin/sh
        set -eo pipefail

        # Check if SBOM file exists
        if [ ! -f "$SBOM_REPORT_FILE" ]; then
            echo "❌ ERROR: Syft SBOM file ($SBOM_REPORT_FILE) not found!"
            exit 1
        fi

        echo "🚀 Uploading Syft SBOM to Dependency-Track..."
        if curl -X "POST" "$(DEPENDENCY_TRACK_URL)" \
             -H "Content-Type: multipart/form-data" \
             -H "X-Api-Key: $(DEPENDENCY_TRACK_API_KEY)" \
             -F "project=$(PROJECT_UUID)" \
             -F "bom=@$SBOM_REPORT_FILE"; then
            echo "✅ Syft SBOM uploaded successfully."
        else
            echo "❌ Failed to upload Syft SBOM to Dependency-Track!" >&2
            exit 1
        fi

        # Check if Trivy CycloneDX report exists
        if [ ! -f "$TRIVY_CYCLONEDX_FILE" ]; then
            echo "❌ ERROR: Trivy CycloneDX file ($TRIVY_CYCLONEDX_FILE) not found!"
            exit 1
        fi

        echo "🚀 Uploading Trivy CycloneDX report to Dependency-Track..."
        if curl -X "POST" "$(DEPENDENCY_TRACK_URL)" \
             -H "Content-Type: multipart/form-data" \
             -H "X-Api-Key: $(DEPENDENCY_TRACK_API_KEY)" \
             -F "project=$(PROJECT_UUID)" \
             -F "bom=@$TRIVY_CYCLONEDX_FILE"; then
            echo "✅ Trivy CycloneDX report uploaded successfully."
        else
            echo "❌ Failed to upload Trivy report to Dependency-Track!" >&2
            exit 1
        fi
      displayName: "Upload SBOM & Vulnerability Reports to OWASP Dependency-Track"
